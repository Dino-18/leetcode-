//https://leetcode-cn.com/problems/min-stack/
/**
两种实现方法：
方法一：使用一个辅助栈维护当前最小值。每次push时比较当前数和最小栈栈顶元素大小，push入较小的那一个；使用额外空间，O(1) O(n)
方法二：x_stack保存当前元素x与最小元素的差值；x_min保存当前最小元素；diff计算当前元素和最小元素的差值。若diff<0，则应该不断更新当前最小值。O(1) O(1)
*/
/**
 * initialize your data structure here.
 */
 //方法一
 /**
 * initialize your data structure here.
 */
var MinStack = function() {
    this.x_stack = [];
    this.min_stack = [Infinity]; //总是用[this.min_stack.length - 1]（即栈顶）保存最小值
};

/** 
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function(x) {
    this.x_stack.push(x);
    this.min_stack.push(Math.min(this.min_stack[this.min_stack.length - 1], x));
};

/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
    this.x_stack.pop();
    this.min_stack.pop();
};

/**
 * @return {number}
 */
MinStack.prototype.top = function() {
    return this.x_stack[this.x_stack.length - 1];
};

/**
 * @return {number}
 */
MinStack.prototype.getMin = function() {
    return this.min_stack[this.min_stack.length - 1];
};
 
 
 
 //方法二
var MinStack = function() {
    this.x_stack = []; //保存当前元素和最小值之间的差值
    this.min_x = -1; //保存最小元素
    this.diff = 0; //计算差值
};

/** 
 * @param {number} x
 * @return {void}
 */
MinStack.prototype.push = function(x) {
    if(this.x_stack.length==0) {
        this.x_stack.push(0);
        this.min_x = x;
        this.diff = 0
    } else {
        this.diff = x-this.min_x; //计算差值，如果diff<0，则可以更新最小值
        this.x_stack.push(this.diff);
        if(this.diff<0) {
            this.min_x = x;
        }
    }
};

/**
 * @return {void}
 */
MinStack.prototype.pop = function() {
    if(this.x_stack) {
        this.diff = this.x_stack.pop();
        if(this.diff<0) {
            top = this.min_x;
            this.min_x = this.min_x - this.diff;
        } else {
            top = this.min_x + this.diff; 
        }
    }
    return top;
};

/**
 * @return {number}
 */
MinStack.prototype.top = function() {
    if(this.x_stack[this.x_stack.length-1]<0) {
        return this.min_x;
    } else {
        return this.min_x+this.x_stack[this.x_stack.length-1];
    }
};

/**
 * @return {number}
 */
MinStack.prototype.getMin = function() {
    if(this.x_stack) {
        return this.min_x;
    } else {
        return -1;
    }
    
};
